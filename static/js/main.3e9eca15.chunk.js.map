{"version":3,"sources":["Component/index.js","App.js","reportWebVitals.js","index.js"],"names":["ProgressIndicatorStateContext","React","createContext","ProgressIndicatorControllerContext","ProgressIndicatorController","props","Consumer","children","ProgressIndicator","loader","Backdrop","style","zIndex","color","position","open","CircularProgress","ProgressIndicatorProvider","signalLoading","setState","prevState","newCount","loadingCount","isLoading","signalLoaded","state","controllers","Provider","value","this","Component","MyDemo","handleSubmit","progressIndicatorController","event","preventDefault","window","setTimeout","onSubmit","type","App","height","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oVAcMA,EAAgCC,IAAMC,cAAc,IACpDC,EAAqCF,IAAMC,cAAc,IAEzDE,EAA8B,SAACC,GAAD,OAChC,cAACF,EAAmCG,SAApC,UACKD,EAAME,YAITC,EAAoB,kBACtB,cAACR,EAA8BM,SAA/B,UACK,SAAAG,GAAM,OACH,cAACC,EAAA,EAAD,CACIC,MAAO,CACHC,OAAQ,KACRC,MAAO,UACPC,SAAU,YAEdC,KAAMN,EANV,SAOI,cAACO,EAAA,EAAD,CAAkBH,MAAM,kBAmEzBI,E,kDA7DX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAUVa,cAAgB,WACZ,EAAKC,UAAS,SAACC,GACX,IAAMC,EAAWD,EAAUE,aAAe,EAC1C,OAAO,2BACAF,GADP,IAEIE,aAAcD,EACdE,UAAWF,EAAW,QAjBf,EAqBnBG,aAAe,WACX,EAAKL,UAAS,SAACC,GACX,IAAMC,EAAuC,IAA3BD,EAAUE,aAAsB,EAAIF,EAAUE,aAAe,EAC/E,OAAO,2BACAF,GADP,IAEIE,aAAcD,EACdE,UAAWF,EAAW,QAzB9B,EAAKI,MAAQ,CACTH,aAAc,EACdC,WAAW,EACXG,YAAa,CACTR,cAAe,EAAKA,cACpBM,aAAc,EAAKA,eAPZ,E,qDAkCf,OACI,eAACrB,EAAmCwB,SAApC,CAA6CC,MAAOC,KAAKJ,MAAMC,YAA/D,UACI,cAAC1B,EAA8B2B,SAA/B,CAAwCC,MAAOC,KAAKJ,MAAMF,UAA1D,SACI,cAAC,EAAD,MAEHM,KAAKxB,MAAME,gB,GAxCYN,IAAM6B,WCf9C,SAASC,IAEP,IAAMC,EAAe,SAACC,GAAD,OAAiC,SAACC,GACrDA,EAAMC,iBACNF,EAA4Bf,gBAE5BkB,OAAOC,YAAW,WAChBJ,EAA4BT,iBAC3B,OAGL,OACE,cAAC,EAAD,UACG,SAAAS,GAA2B,OAC1B,sBAAMK,SAAUN,EAAaC,GAA7B,SACE,uBAAOM,KAAK,SAASX,MAAM,gBAOtBY,MA1Cf,WACE,OACE,gCACE,qBAAK7B,MAAO,CAAE8B,OAAQ,OAAQC,gBAAiB,OAA/C,SACE,eAAC,EAAD,iDAEE,cAACX,EAAD,SAIJ,qBAAKpB,MAAO,CAAE8B,OAAQ,OAAQ3B,SAAU,WAAY4B,gBAAiB,QAArE,SACE,eAAC,EAAD,+CAEE,cAACX,EAAD,aCJKY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3e9eca15.chunk.js","sourcesContent":["/**\n * Summary. A simple Progress Indicator that displays a backdrop and spinner via trigger functions\n * \n *  Exports a ProgressIndicatorProvider that renders the spinner as well as provides trigger controls to children.\n *  Child components consuming the context can call two methods:\n *      context.signalLoading() - increments the active loading count\n *      context.signalLoaded() - decrements the active loading count\n *  When active loading count is zero, loading backdrop disappears\n *  When active loading count is greater than zero, backdrop appears.\n */\n\nimport { Backdrop, CircularProgress } from '@material-ui/core';\nimport React, { useContext } from 'react';\n\nconst ProgressIndicatorStateContext = React.createContext({}); // Contains state - used only by internal loader \nconst ProgressIndicatorControllerContext = React.createContext({}); // Contains functions that update state - used by children\n\nconst ProgressIndicatorController = (props) => (\n    <ProgressIndicatorControllerContext.Consumer>\n        {props.children}\n    </ProgressIndicatorControllerContext.Consumer>\n);\n\nconst ProgressIndicator = () => (\n    <ProgressIndicatorStateContext.Consumer>\n        {loader => (\n            <Backdrop\n                style={{\n                    zIndex: 9999,\n                    color: '#00D8FE',\n                    position: \"absolute\"\n                }}\n                open={loader} >\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        )}\n    </ProgressIndicatorStateContext.Consumer>\n);\nclass ProgressIndicatorProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingCount: 0,\n            isLoading: false,\n            controllers: {\n                signalLoading: this.signalLoading,\n                signalLoaded: this.signalLoaded,\n            }\n        };\n    }\n    signalLoading = () => {\n        this.setState((prevState) => {\n            const newCount = prevState.loadingCount + 1\n            return {\n                ...prevState,\n                loadingCount: newCount,\n                isLoading: newCount > 0\n            }\n        });\n    }\n    signalLoaded = () => {\n        this.setState((prevState) => {\n            const newCount = (prevState.loadingCount === 0) ? 0 : prevState.loadingCount - 1\n            return {\n                ...prevState,\n                loadingCount: newCount,\n                isLoading: newCount > 0\n            }\n        });\n    }\n\n    render() {\n        // Nested Providers is necessary to prevent consumer components from re-rendering if they only need to \"update\" the data.\n        return (\n            <ProgressIndicatorControllerContext.Provider value={this.state.controllers}>\n                <ProgressIndicatorStateContext.Provider value={this.state.isLoading}>\n                    <ProgressIndicator />\n                </ProgressIndicatorStateContext.Provider>\n                {this.props.children}\n            </ProgressIndicatorControllerContext.Provider>\n        );\n    }\n};\n\nconst withProgressIndicator = Component => class Contextual extends React.PureComponent {\n    static contextType = ProgressIndicatorControllerContext;\n    render() {\n        return (\n            <Component {...this.props} loader={this.context} />\n        )\n    }\n}\n\nconst useProgressIndicator = () => { return useContext(ProgressIndicatorControllerContext) }\n\nexport {\n    withProgressIndicator,\n    useProgressIndicator,\n    ProgressIndicatorController,\n};\nexport default ProgressIndicatorProvider;","import './App.css';\nimport ProgressIndicatorProvider, { ProgressIndicatorController } from \"./Component\"\n\nfunction App() {\n  return (\n    <div>\n      <div style={{ height: \"50vh\", backgroundColor: \"red\"}}>\n        <ProgressIndicatorProvider>\n          Demo Full Screen (2 second timeout)\n          <MyDemo />\n        </ProgressIndicatorProvider>\n      </div>\n      {/* Notice 'position: \"relative\"', necessary for scoping backdrop to parent container */}\n      <div style={{ height: \"50vh\", position: \"relative\", backgroundColor: \"grey\" }}>\n        <ProgressIndicatorProvider>\n          Demo Container (2 second timeout)\n          <MyDemo />\n        </ProgressIndicatorProvider>\n      </div>\n    </div>\n  );\n}\n\nfunction MyDemo() {\n\n  const handleSubmit = (progressIndicatorController) => (event) => {\n    event.preventDefault();\n    progressIndicatorController.signalLoading();\n    // Replace with app logic\n    window.setTimeout(() => {\n      progressIndicatorController.signalLoaded();\n    }, 2000);\n  }\n\n  return (\n    <ProgressIndicatorController>\n      {progressIndicatorController => (\n        <form onSubmit={handleSubmit(progressIndicatorController)}>\n          <input type=\"submit\" value=\"Try Me\" />\n        </form>\n      )}\n    </ProgressIndicatorController>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}